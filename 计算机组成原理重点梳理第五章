第五章
  1.指令级并行
    指令之间存在的一种并行性，利用它，计算机可以并行执行两条或两条以上的指令
    开发途径：
      1.重复设置资源
      2.采用流水线技术
       /*使指令重叠并执行*/
    是提高计算机性能的一种重要方法
  2.无法并行？
    两条指令相关，则不能并行执行，或只能部分重叠执行
    相关的三种类型：
      数据相关  名相关 控制相关
    流水线冲突：
      由于相关的存在，使得指令级中的下一条指令不能再指定的时钟周期执行。
      三种类型：
        1.结构冲突：硬件资源冲突
        2.数据冲突：数据相关和名相关
        3.控制冲突：控制相关
          对于提升性能来说，控制相关并非是一个主要的限制。
          /*若不遵守其依赖关系，只要结果正确，就可以这么做*/
          为了保证正确性，要保持最关键的两点
          1.数据流：数据值从其生产者指令到其消费者指令的实际流动
          2.异常行为：指令顺序的改变不能导致程序中发生新的异常
          /*若不遵守控制相关，既不影响异常行为，也不改变数据流，就可以进行指令调度，将失败分支中的指令调度到分支指令前面，即前瞻执行*/
    为什么会有相关？
      相关是程序的固有属性，他反映了程序中指令的相互依赖关系。
      具体的一次相关是否会导致实际冲突的发生以及该冲突会带来多长的停顿，则是流水线的属性。
    程序顺序：原来的程序确定的在完全串行方式下指令的执行顺序。
      尽可能的开发并行性，只在可能会导致错误的情况下，才保持程序顺序。
    如何克服限制：
      1.保持相关，但避免发生冲突
        指令调度
          1.静态调度
            静态调度的流水线依靠编译器对代码进行静态调度，以减少冲突或相关。
            并非在程序执行过程中，而是在 编译期间 进行代码调度和优化。
            软件实现。
            通过把相关的指令拉开“距离”来减少可能的停顿。
            /*之前讨论的流水线属于静态调度的流水线，取出的指令与已经在流水线中执行的指令
          2.动态调度
            
      2.进行代码转换，消除相关
3.分支历史表BHT
  简单的动态分支预测方法
  两位分支预测的性价比比较高
  /*将“只选对的”和“只选错的”改为动态执行*/
4.分支目标缓冲器（BTB）
  又称分支目标cache
  用专门的硬件实现一张表格
    包括两个字段：
      1.执行过的成功分支指令的地址
      2.预测的分支目标地址
5.基于硬件的前瞻执行
  猜测->执行->等待确认->写入寄存器或存储器
  要确保没有不可恢复的操作，以便在猜测错误的情况下能够恢复原来的现场
  将三种思想结合：
    1.动态分支预测。用来选择后续执行的指令
    2.在控制结果尚未出现之前，前瞻的执行后续指令
    3.用动态调度对基本快的各种组合进行跨基本块的调度
  执行步骤：
    1.流出
    2.执行
    3.写结果
    4.确认
  缺点：
    所需硬件太复杂。
    /*比Tomusulo算法多了控制逻辑硬件*/
6.提出多流出技术的原因
  前面介绍的技术能够减少或消除 数据冲突 和 控制冲突 导致的停顿，使CPI接近1；
  但是仅是单流出，CPI不可能小于1
  此时需要采用多流出，一个时钟周期流出多条指令
  两种基本风格：
    1.超标量
      流出条数不固定，有上限，若上限为n，则为n-处理器
      既可以通过编译器进行静态调度，也可以通过Tomasulo算法进行动态调度
      /*超流水线也是一个周期流出多条指令，但是分时流出*/
    2.超长指令字（VLIW）
      流出条数固定。
      生成长指令过指令包。
      指令的并行性显示的表示
      仅支持编译器静态编译
    *超标量的优点：
      1.对程序员透明
      2.没有针对超标量结构进行优化的代码一样可以运行，只是效率低
    
    
