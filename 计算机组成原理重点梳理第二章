第二章
  1.指令系统设计的基本原则
    对传统机器语言的程序设计者可见，是软硬件的界面
    /*参考第一章行4*/
    指令设计内容：
      1.功能设计
      2.格式设计
    要确定哪些由软件实现，哪些由以硬件实现。
    /*从速度、成本、灵活性上来考虑，硬件速度快，成本高，灵活性差*/
    /*使用频率高的指令应硬件实现，参考第一章行24 Amdahl定律*/
    对指令系统的基本要求
      1.完整性：能用指令集解决所有可解问题
      2.规整性：包括对称性和均匀性。对称性：有A-B指令，则必须有B-A指令。均匀性：对不同的操作数类型、字长、操作种类和数据存储单元都要同等对待。
      3.正交性：不同含义的字段编码时互不相关
      4.高效率
      5.兼容性：向后兼容，只可以增加，不可以删改。
   2.指令操作码的优化
      /*指令操作码由两部分组成：操作码和地址码*/
      指令格式不仅对编译形成的代码的长度有影响，而且对处理器的实现也有影响，关乎到处理器的译码。
      指令格式的优化是指如何用 最短的位数 来表示指令的操作信息和地址信息。
      三种编码方式：
        1.赫夫曼编码
          压缩常用的指令，来减少操作码的平均位数。
          /*参考一章行24  Adamlh定律*/
        2.等长扩展码
          仍采用赫夫曼编码的思想，但是仅采用有限几种固定长度的码长
        3.定长操作码0
          统一长度
          以存储空间换取译码速度
          /*上述三种方法的计算，另附计算题汇总*/
    3.指令系统的发展和改进
      3.1沿CICS方向
        3.1.1面向目标程序增强指令功能：最直接。对于使用频率高的指令，用硬件代替软件，用新指令代替旧指令
        3.1.2面向高级语言的优化实现来改进指令系统：高频高级语言指令，增强对应的指令功能或设置专门的指令
        3.1.3面向操作系统的优化实现改进指令系统：尽管使用频率少，但不可或缺
       存在问题：
          1.指令使用频度悬殊
          2.指令系统庞大，条数多，功能复杂
            2.1占用芯片面积大
            2.2增加设计和研发成本，而且易出错
          3.指令操作复杂，CPI值大，可能使执行时间增加
          4.功能复杂，规整性不好，不利于流水线操作来提高性能
      3.2沿CICS方向（设计原则）
        3.2.1指令条数少，功能简单
        3.2.2采用简单统一的指令格式，减少寻址方式
        3.2.3指令的执行在单周期内完成
        3.2.4采用load-store结构
        /*只有load和store指令才能访问寄存器*/
        3.2.5大多数指令采用硬连逻辑
        3.2.6强调优化编译器的作用
        /*为高级语言服务*/
        3.2.7充分利用流水线技术
        
